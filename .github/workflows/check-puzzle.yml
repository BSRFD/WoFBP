name: Puzzle Check
on:
  workflow_dispatch:
  schedule:
    - cron: '30 20 * * 1-5' # Runs at 20:30 UTC (adjust as needed for ET)

jobs:
  puzzle-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary for git diff and history

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Pinned to a specific stable version

    - name: Install dependencies
      run: pip install requests pytz

    - name: Pull latest changes # Ensure local branch is up-to-date before attempting script changes
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions-bot@users.noreply.github.com" # Or your preferred bot email
        git pull --ff-only

    - name: Inject cache-buster versions into static files
      run: |
        TIMESTAMP=$(date +%s)
        # Use a different sed delimiter if __VERSION__ might contain slashes, though unlikely here
        sed -i "s/__VERSION__/$TIMESTAMP/g" index.html
        sed -i "s/__VERSION__/$TIMESTAMP/g" style.css
        sed -i "s/__VERSION__/$TIMESTAMP/g" update.js
        echo "Modified static files (for versioning):"
        git diff --name-status index.html style.css update.js || echo "No changes to static files or files not found."

    - name: Check for solution updates
      env:
        TZ: America/New_York # Sets timezone for the Python script if it relies on system TZ (though pytz handles it)
      id: check # This ID is used to set the output 'needs_commit'
      run: |
        set +e # Do not exit immediately on error, let the script handle it
        
        for attempt in {1..360}; do
          # Run Python script, redirect stdout to 'output' variable and stderr to 'warnings.log' file
          output=$(python -W ignore fetch_puzzle.py 2>warnings.log)
          exit_code=$? # Get the exit code of the Python script
          warnings=$(cat warnings.log) # Get the content of stderr (warnings.log)
          
          case $exit_code in
            0) # Python script exited with 0 (EXIT_CODE_SUCCESS)
              if [[ "$output" == *"Updated:"* ]]; then
                echo "needs_commit=true" >> $GITHUB_OUTPUT # Signal that a commit is needed
                echo "‚úÖ $output" # Log the success message from Python's stdout
                exit 0 # Exit this run script successfully
              else
                # Python script exited 0 but "Updated:" not in stdout.
                # This means "Already up-to-date" or similar.
                echo "‚ÑπÔ∏è $output" # Log the informational message from Python's stdout
                exit 0 # Exit this run script successfully (no error, no update to commit)
              fi
              ;;
            1) # Python script exited with 1 (EXIT_CODE_RETRY_NEEDED)
              if [ $attempt -ge 360 ]; then # Use -ge (greater than or equal) for safety
                echo "üü° No update after $attempt attempts. Exiting."
                exit 0 # Exit this run script successfully (no error, just max retries reached)
              fi
              echo "‚è≥ Attempt $attempt/360: Python script signalled retry. Output: [$output]. Warnings: [$warnings]. Retrying in 60s..."
              sleep 60
              ;;
            *) # Python script exited with any other code (critical failure)
              echo "‚ùå Critical failure: Python script exited with code $exit_code on attempt $attempt."
              echo "--- Stderr from fetch_puzzle.py (captured in warnings.log) ---"
              echo "$warnings"
              echo "--- Stdout from fetch_puzzle.py (captured in output variable) ---"
              echo "$output"
              exit 1 # Exit this run script with an error, failing the GitHub Actions step
              ;;
          esac
        done
        # If loop finishes without exiting (e.g. max retries reached and exit 0 inside loop),
        # ensure a final exit status if needed, though current logic exits within the loop.
        echo "Loop finished, check logic if this point is reached unexpectedly."
        exit 0 # Default to success if loop completes (e.g. after max retries)

    - name: Commit and push changes
      # Only run this step if the 'check' step set 'needs_commit' to 'true'
      if: ${{ steps.check.outputs.needs_commit == 'true' }}
      run: |
        # Add all files that might have been changed: data, history, and versioned static files
        git add data.json past-solutions.json index.html style.css update.js
        # Check if there are any changes staged for commit
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Auto-update puzzle solution and versions [skip ci]"
          git push
        fi
